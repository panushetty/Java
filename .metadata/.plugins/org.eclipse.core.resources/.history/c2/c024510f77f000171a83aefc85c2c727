package com.pranayshetty;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class Locations implements Map<Integer,Location>{

	private static Map<Integer,Location> locations=new HashMap<>();

	public static void main(String[] args)throws IOException {
		
		try(DataOutputStream locFile=new DataOutputStream(new BufferedOutputStream(new FileOutputStream("locations.dat")))) {
			for(Location location:locations.values()) {
				locFile.writeInt(location.getLocationID());
				locFile.writeUTF(location.getDescription());
				System.out.println("Writing location "+location.getLocationID()+" : "+location.getDescription());
				System.out.println("Writing "+(location.getExits().size()-1)+" exits");
				locFile.writeInt(location.getExits().size());
				for(String direction:location.getExits().keySet()){
					if(!direction.equalsIgnoreCase("Q")) {
						System.out.println("\t\t"+direction+","+location.getExits().get(direction));
						locFile.writeUTF(direction);
						locFile.writeInt(location.getExits().get(direction));
					}
				}  
			}
		}
		
		
		
		
		
		
		
		
//		try(FileWriter locFile=new FileWriter("locations.txt");
//			FileWriter dirFile=new FileWriter("directions.txt");	
//			){
//			for(Location location:locations.values()) {
//				locFile.write(location.getLocationID()+","+location.getDescription()+"\n");
//				for(String direction:location.getExits().keySet()) {
//					dirFile.write(location.getLocationID()+","+direction+","+location.getExits().get(direction)+"\n");
//				}
//			
//			}
//		}
		
		
//		FileWriter locfile=null;
//		try { 
//			locfile=new FileWriter("locations.txt" );
//			for(Location location:locations.values()) {
//				locfile.write(location.getLocationID()+","+location.getDescription()+"\n");
//			}
//		}finally {
//			if(locfile!=null) {
//				locfile.close();
//			}
//		}

	}
	
	
	
	static {
		try(DataInputStream locFile=new DataInputStream(new BufferedInputStream(new FileInputStream("locations.dat")))){
			boolean eof=false;
			while(!eof) {
				try {
					Map<String,Integer> exits=new HashMap<>();
					int locId=locFile.readInt();
					String description=locFile.readUTF();
					int numExits=locFile.readInt();
					System.out.println("Description :"+description+" LocId :"+locId+" With exits "+numExits);
					for (int i = 0; i < numExits; i++) {
						String direction=locFile.readUTF();
						int destination=locFile.readInt();
						exits.put(direction, destination);
						System.out.println("\t\t"+direction+","+destination);
					
				}catch(EOFException e){
					eof=true;
				}
				
					
				}
				locations.put(locId, new Location(locId, description, exits)); 
				
			}
			
			
		}catch(IOException e){
			System.out.println(e.getStackTrace());
		}
		
		
		
		
		
		
		
		
		
//		Scanner in=null;
//		try {
//			in=new Scanner(new FileReader("locations_big.txt"));
//			in.useDelimiter(",");
//			while(in.hasNextLine()) {
//				int loc=in.nextInt();
//				in.skip(",");
//				String description=in.nextLine();
//				System.out.println("Imported loc: "+loc+": "+description);
//				Map<String,Integer> tempExit=new HashMap<>();
//				locations.put(loc, new Location(loc,description,tempExit));
//				
//				
//				
//			}
//		}catch(IOException e) {
//			e.printStackTrace();
//		}finally {
//			if(in!=null) {
//				in.close();
//			}
//		}
//		
//		
//		try {
//			in=new Scanner(new BufferedReader(new FileReader("directions_big.txt")));
//			in.useDelimiter(",");
//			while(in.hasNextLine()) {
////				int loc=in.nextInt();
////				in.skip(in.delimiter());
////				String direction=in.next();
////				in.skip(in.delimiter());
////				String dest=in.nextLine();
////				int destination=Integer.parseInt(dest);
//				
//				String input=in.nextLine();
//				String[] data=input.split(",");
//				int loc=Integer.parseInt(data[0]);
//				String direction=data[1];
//				int destination=Integer.parseInt(data[2]);
//			
//				
//				System.out.println(loc+": "+direction+": "+destination);
//				Location location=locations.get(loc);
//				location.addExit(direction,destination);
//				
//				
//			}
//		}
//		catch (IOException e) {
//			e.printStackTrace();
//		}
//		finally {
//			if(in!=null) {
//				in.close(); 
//			}
//		}
		
		
//		Map<String, Integer> tempExit = new HashMap<String, Integer>();
//        locations.put(0, new Location(0, "You are sitting in front of a computer learning Java",null));
//
//        tempExit = new HashMap<String, Integer>();
//        tempExit.put("W", 2);
//        tempExit.put("E", 3);
//        tempExit.put("S", 4);
//        tempExit.put("N", 5);
//        locations.put(1, new Location(1, "You are standing at the end of a road before a small brick building",tempExit));
//
//        tempExit = new HashMap<String, Integer>();
//        tempExit.put("N", 5);
//        locations.put(2, new Location(2, "You are at the top of a hill",tempExit));
//
//        tempExit = new HashMap<String, Integer>();
//        tempExit.put("W", 1);
//        locations.put(3, new Location(3, "You are inside a building, a well house for a small spring",tempExit));
//
//        tempExit = new HashMap<String, Integer>();
//        tempExit.put("N", 1);
//        tempExit.put("W", 2);
//        locations.put(4, new Location(4, "You are in a valley beside a stream",tempExit));
//
//        tempExit = new HashMap<String, Integer>();
//        tempExit.put("S", 1);
//        tempExit.put("W", 2);
//        locations.put(5, new Location(5, "You are in the forest",tempExit));
	}
	
	
	@Override
	public void clear() {
		// TODO Auto-generated method stub
		locations.clear();
	}

	@Override
	public boolean containsKey(Object arg0) {
		// TODO Auto-generated method stub
		return locations.containsKey(arg0);
	}

	@Override
	public boolean containsValue(Object arg0) {
		// TODO Auto-generated method stub
		return locations.containsValue(arg0);
	}

	@Override
	public Set<Entry<Integer, Location>> entrySet() {
		// TODO Auto-generated method stub
		return locations.entrySet(); 
	}

	@Override
	public Location get(Object arg0) {
		// TODO Auto-generated method stub
		return locations.get(arg0);
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return locations.isEmpty();
	}

	@Override
	public Set<Integer> keySet() {
		// TODO Auto-generated method stub
		
		return locations.keySet();
	}

	@Override
	public Location put(Integer arg0, Location arg1) {
		// TODO Auto-generated method stub
		return locations.put(arg0, arg1);
	}

	@Override
	public void putAll(Map<? extends Integer, ? extends Location> arg0) {
		// TODO Auto-generated method stub
		locations.putAll(arg0);
	}

	@Override
	public Location remove(Object arg0) {
		// TODO Auto-generated method stub
		return locations.remove(arg0);
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return locations.size();
	}

	@Override
	public Collection<Location> values() {
		// TODO Auto-generated method stub
		return locations.values();
	}
	
	

}
