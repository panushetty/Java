package com.pranayshetty;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.ReentrantLock;

import static com.pranayshetty.Main.EOF;  

public class Main {
public static final String EOF="EOF";
	public static void main(String[] args) {
		List<String> buffer=new ArrayList<>();
		ReentrantLock bufferlock=new ReentrantLock();
		
		ExecutorService executorService=Executors.newFixedThreadPool(3);
		MyProducer producer=new MyProducer(buffer,"******",bufferlock);
		MyConsumer consumer=new MyConsumer(buffer, "++++++",bufferlock);
		MyConsumer consumer1=new MyConsumer(buffer, "------",bufferlock);
		
		
		executorService.execute(producer);
		executorService.execute(consumer);
		executorService.execute(consumer1);
		
		executorService.shutdown();

	}

}

class MyProducer implements Runnable{
	private List<String> buffer;
	private String color;
	private ReentrantLock bufferlock;
	
	public MyProducer(List<String> buffer, String color,ReentrantLock bufferlock) {
		this.buffer = buffer;
		this.color = color;
		this.bufferlock=bufferlock;
	}
	
	public void run() {
		Random random=new Random();
		String[] nums= {"1","2","3","4","5"};
		
		for(String num:nums) {
			try {
				System.out.println(color+"Adding ...."+num);
			    bufferlock.lock();
			    try {
			    	buffer.add(num);
			    }finally {
			    	bufferlock.unlock();
			    }
				Thread.sleep(random.nextInt(1000));
			}catch (InterruptedException e){
				System.out.println("Producer was interrupted");
		    }
		}
		
		System.out.println("Adding EOF and Exiting");
		bufferlock.lock();
		try {
			buffer.add("EOF");
		}finally {
			bufferlock.unlock();
		}
		
	}
	
	
	
	
}


class MyConsumer implements Runnable{
	private List<String> buffer;
	private String color;
	private ReentrantLock bufferlock;
	
	
	public MyConsumer(List<String> buffer, String color,ReentrantLock bufferlock) {
		this.buffer = buffer;
		this.color = color;
		this.bufferlock=bufferlock;
	}
	
	public void run() {
		int counter=0;
		while(true) {
			if(bufferlock.tryLock())
			{
				try {
					if(buffer.isEmpty()) {
						continue;
					}
					System.out.println("Counter is       "+counter);
					if(buffer.get(0).equals("EOF")) {
						System.out.println(color+"Exiting");
						break;
					}else {
						System.out.println(color+"Removed"+buffer.remove(0));
					}
				}finally {
					bufferlock.unlock();
				}
			}
			else {
				counter++; 
			}
				
			 
		}
	}
	
	
	
}